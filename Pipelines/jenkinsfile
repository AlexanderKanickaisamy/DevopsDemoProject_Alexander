node {
    // some block

 // Get Artifactory Server Instace Details

 def server = Artifactory.server "01"
 def buildInfo = Artifactory.newBuildInfo()

 // Project Path
 def project_path = "App-Code/testapp-code"


 stage('Git CheckOut') {
  git branch: 'main', url: 'https://github.com/AlexanderKanickaisamy/DevopsDemoProject_Alexander.git' 
 }
 
 dir(project_path) {

 stage('Maven Clean') {
  sh 'mvn clean'
 }

 stage('Maven Compile') {
  sh 'mvn compile'
 }
 
 stage('Maven Test') {
    sh 'mvn test'
 }

 stage('Maven Package') {
  sh 'mvn package'
 }


 stage('Build Management') {
		def uploadSpec = """{ 
			"files": [
			{
			"pattern": "**/*.war",
			"target": "samplejavaapp-repo"
			}
		]

	}"""
	
	server.upload spec: uploadSpec
}

stage('Publish Build Info'){
   server.publishBuildInfo buildInfo
}

 stage('Archive Artifact') {
  archiveArtifacts artifacts: 'target/maven-web-application.war', followSymlinks: false
 }


 stage('Docker Deployment') {
  sh 'docker-compose up -d --build'
 }

 stage('Getting Ready For Ansible Deployment'){
     sh "echo \'<h1>JENKINS TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>\' > terraform-code/ansible-code/roles/webappjboss/files/jenkins.html"
 }

 
 stage('Getting Ready For Terraform Deployment'){
     sh "cp -rf target/maven-web-application.war terraform-code/ansible-code/roles/webappjboss/files/"
 }

 stage('Terraform Deployment'){
     sh "cd terraform-code; terraform init ; terraform apply --auto-approve"
 }

 stage('Send email') {
     def mailRecipients = "alexps44login@gmail.com"
     def jobName = currentBuild.fullDisplayName

     emailext body: '''${SCRIPT, template="groovy-html.template"}''',
         mimeType: 'text/html',
         subject: "[Jenkins] ${jobName}",
         to: "${mailRecipients}",
         replyTo: "${mailRecipients}",
         recipientProviders: [[$class: 'CulpritsRecipientProvider']]
 }


 }
}
